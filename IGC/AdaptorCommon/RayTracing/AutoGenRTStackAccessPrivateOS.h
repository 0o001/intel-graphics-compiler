/*========================== begin_copyright_notice ============================

Copyright (C) 2019-2023 Intel Corporation

SPDX-License-Identifier: MIT

============================= end_copyright_notice ===========================*/


// This file is autogenerated.  It is not currently part of the build process as
// we don't expect to update that often.

#include "Probe/Assertion.h"
#include "llvmWrapper/IR/Module.h"

static Type* _struct_RTStackFormat__RTStack(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::RTStack";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _struct_RTStackFormat__HWRayData(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__HWRayData(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::HWRayData";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _struct_RTStackFormat__MemHit(M),
      _struct_RTStackFormat__MemHit(M),
      [&] {
        auto *EltTy =
          _struct_RTStackFormat__MemRay(M);
        return ArrayType::get(EltTy, 2);
      }(),
      [&] {
        auto *EltTy =
          _struct_RTStackFormat__MemTravStack(M);
        return ArrayType::get(EltTy, 2);
      }(),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__MemHit(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::MemHit";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _union_RTStackFormat__MemHit__RT(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_RTStackFormat__MemHit__RT(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.RTStackFormat::MemHit::RT";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _struct_RTStackFormat__MemHit__RT__Xe(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__MemHit__RT__Xe(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::MemHit::RT::Xe";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      Type::getFloatTy(M.getContext()),
      Type::getFloatTy(M.getContext()),
      Type::getFloatTy(M.getContext()),
      _union_anon(M),
      _union_anon_0(M),
      _union_anon_2(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_anon(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.anon";
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 32),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_anon_0(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.anon.0";
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 64),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_anon_2(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.anon.2";
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 64),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__MemRay(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::MemRay";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      [&] {
        auto *EltTy =
          Type::getFloatTy(M.getContext());
        return ArrayType::get(EltTy, 3);
      }(),
      [&] {
        auto *EltTy =
          Type::getFloatTy(M.getContext());
        return ArrayType::get(EltTy, 3);
      }(),
      Type::getFloatTy(M.getContext()),
      Type::getFloatTy(M.getContext()),
      _union_RTStackFormat__MemRay__RT(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_RTStackFormat__MemRay__RT(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.RTStackFormat::MemRay::RT";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _struct_RTStackFormat__MemRay__RT__Xe(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__MemRay__RT__Xe(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::MemRay::RT::Xe";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _union_anon_4(M),
      _union_anon_6(M),
      _union_anon_8(M),
      _union_anon_10(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_anon_4(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.anon.4";
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 64),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_anon_6(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.anon.6";
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 64),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_anon_8(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.anon.8";
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 64),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_anon_10(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.anon.10";
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 64),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__MemTravStack(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::MemTravStack";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _union_anon_12(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_anon_12(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.anon.12";
    Type* Tys[] = {
      _struct_anon_14(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_anon_14(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.anon.14";
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 64),
      IntegerType::get(M.getContext(), 32),
      [&] {
        auto *EltTy =
          IntegerType::get(M.getContext(), 32);
        return ArrayType::get(EltTy, 4);
      }(),
      [&] {
        auto *EltTy =
          _struct_RTStackFormat__NodeInfo(M);
        return ArrayType::get(EltTy, 4);
      }(),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__NodeInfo(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::NodeInfo";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 8),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__RayQueryObject(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::RayQueryObject";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _struct_RTStackFormat__RTStack(M),
      _struct_RTStackFormat__RayQueryStateInfo(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__RayQueryStateInfo(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::RayQueryStateInfo";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 8),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__SMStack(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::SMStack";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _struct_RTStackFormat__SMRayData(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__SMRayData(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::SMRayData";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _struct_RTStackFormat__MemHit(M),
      _struct_RTStackFormat__MemHit(M),
      [&] {
        auto *EltTy =
          _struct_RTStackFormat__MemRay(M);
        return ArrayType::get(EltTy, 2);
      }(),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__SWHotZone_v1(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::SWHotZone_v1";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _struct_RTStackFormat__StackPtrDRIEncoding(M),
      [&] {
        auto *EltTy =
          IntegerType::get(M.getContext(), 8);
        return ArrayType::get(EltTy, 8);
      }(),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__StackPtrDRIEncoding(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::StackPtrDRIEncoding";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _struct_RTStackFormat__StackPtrAndBudges(M),
      IntegerType::get(M.getContext(), 32),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__StackPtrAndBudges(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::StackPtrAndBudges";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 16),
      _union_anon_15(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_anon_15(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.anon.15";
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 16),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__SWHotZone_v2(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::SWHotZone_v2";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 32),
      [&] {
        auto *EltTy =
          IntegerType::get(M.getContext(), 32);
        return ArrayType::get(EltTy, 3);
      }(),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_IGC__RayDispatchGlobalData(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.IGC::RayDispatchGlobalData";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 64),
      IntegerType::get(M.getContext(), 64),
      _union_anon_17(M),
      _union_anon_19(M),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 64),
      IntegerType::get(M.getContext(), 64),
      IntegerType::get(M.getContext(), 64),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 64),
      IntegerType::get(M.getContext(), 64),
      IntegerType::get(M.getContext(), 64),
      IntegerType::get(M.getContext(), 64),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 64),
      IntegerType::get(M.getContext(), 64),
      IntegerType::get(M.getContext(), 64),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 64),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 32),
      [&] {
        auto *EltTy =
          IntegerType::get(M.getContext(), 32);
        return ArrayType::get(EltTy, 3);
      }(),
      IntegerType::get(M.getContext(), 32),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_anon_17(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.anon.17";
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 32),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_anon_19(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.anon.19";
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 32),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_IGC__TypeHoleGlobalRootSig(Module &M, Type* TypeHoleGlobalRootSig)
{
  return
  [&] {
    (void)M;
    IGC_ASSERT_MESSAGE(checkAlign(M, cast<StructType>(TypeHoleGlobalRootSig), 8), "type not aligned!");
    return TypeHoleGlobalRootSig;
  }();
}
static Type* _struct_RTStackFormat__InstanceLeaf(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::InstanceLeaf";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _struct_RTStackFormat__InstanceLeaf__Part0(M),
      _struct_RTStackFormat__InstanceLeaf__Part1(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__InstanceLeaf__Part0(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::InstanceLeaf::Part0";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _union_RTStackFormat__InstanceLeaf__Part0__RT(M),
      [&] {
        auto *EltTy =
          Type::getFloatTy(M.getContext());
        return ArrayType::get(EltTy, 3);
      }(),
      [&] {
        auto *EltTy =
          Type::getFloatTy(M.getContext());
        return ArrayType::get(EltTy, 3);
      }(),
      [&] {
        auto *EltTy =
          Type::getFloatTy(M.getContext());
        return ArrayType::get(EltTy, 3);
      }(),
      [&] {
        auto *EltTy =
          Type::getFloatTy(M.getContext());
        return ArrayType::get(EltTy, 3);
      }(),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_RTStackFormat__InstanceLeaf__Part0__RT(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.RTStackFormat::InstanceLeaf::Part0::RT";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _struct_RTStackFormat__InstanceLeaf__Part0__RT__Xe(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__InstanceLeaf__Part0__RT__Xe(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::InstanceLeaf::Part0::RT::Xe";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 32),
      _union_anon_21(M),
      IntegerType::get(M.getContext(), 64),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_anon_21(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.anon.21";
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 32),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__InstanceLeaf__Part1(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::InstanceLeaf::Part1";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 64),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 32),
      [&] {
        auto *EltTy =
          Type::getFloatTy(M.getContext());
        return ArrayType::get(EltTy, 3);
      }(),
      [&] {
        auto *EltTy =
          Type::getFloatTy(M.getContext());
        return ArrayType::get(EltTy, 3);
      }(),
      [&] {
        auto *EltTy =
          Type::getFloatTy(M.getContext());
        return ArrayType::get(EltTy, 3);
      }(),
      [&] {
        auto *EltTy =
          Type::getFloatTy(M.getContext());
        return ArrayType::get(EltTy, 3);
      }(),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__QuadLeaf(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::QuadLeaf";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _struct_RTStackFormat__PrimLeafDesc(M),
      IntegerType::get(M.getContext(), 32),
      _union_RTStackFormat__QuadLeaf__RT(M),
      [&] {
        auto *EltTy =
          Type::getFloatTy(M.getContext());
        return ArrayType::get(EltTy, 3);
      }(),
      [&] {
        auto *EltTy =
          Type::getFloatTy(M.getContext());
        return ArrayType::get(EltTy, 3);
      }(),
      [&] {
        auto *EltTy =
          Type::getFloatTy(M.getContext());
        return ArrayType::get(EltTy, 3);
      }(),
      [&] {
        auto *EltTy =
          Type::getFloatTy(M.getContext());
        return ArrayType::get(EltTy, 3);
      }(),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__PrimLeafDesc(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::PrimLeafDesc";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 32),
      _union_RTStackFormat__PrimLeafDesc__RT(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_RTStackFormat__PrimLeafDesc__RT(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.RTStackFormat::PrimLeafDesc::RT";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _struct_RTStackFormat__PrimLeafDesc__RT__Xe(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__PrimLeafDesc__RT__Xe(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::PrimLeafDesc::RT::Xe";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _union_anon_23(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_anon_23(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.anon.23";
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 32),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_RTStackFormat__QuadLeaf__RT(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.RTStackFormat::QuadLeaf::RT";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _struct_RTStackFormat__QuadLeaf__RT__Xe(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__QuadLeaf__RT__Xe(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::QuadLeaf::RT::Xe";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _union_anon_25(M),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _union_anon_25(Module &M)
{
  return
  [&] {
    StringRef StructName = "union.anon.25";
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 32),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__ProceduralLeaf(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::ProceduralLeaf";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _struct_RTStackFormat__PrimLeafDesc(M),
      IntegerType::get(M.getContext(), 32),
      [&] {
        auto *EltTy =
          IntegerType::get(M.getContext(), 32);
        return ArrayType::get(EltTy, 13);
      }(),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_IGC__RTGlobalsAndRootSig(Module &M, Type* TypeHoleGlobalRootSig)
{
  return
  [&] {
    StringRef StructName = "struct.IGC::RTGlobalsAndRootSig";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      _struct_IGC__RayDispatchGlobalData(M),
      _struct_IGC__TypeHoleGlobalRootSig(M, TypeHoleGlobalRootSig),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__BVH(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::BVH";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 64),
      [&] {
        auto *EltTy =
          Type::getFloatTy(M.getContext());
        return ArrayType::get(EltTy, 3);
      }(),
      [&] {
        auto *EltTy =
          Type::getFloatTy(M.getContext());
        return ArrayType::get(EltTy, 3);
      }(),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 32),
      [&] {
        auto *EltTy =
          _struct_RTStackFormat__InternalNode(M);
        return ArrayType::get(EltTy, 1);
      }(),
      [&] {
        auto *EltTy =
          _struct_RTStackFormat__QuadLeaf(M);
        return ArrayType::get(EltTy, 1);
      }(),
      [&] {
        auto *EltTy =
          _struct_RTStackFormat__ProceduralLeaf(M);
        return ArrayType::get(EltTy, 1);
      }(),
      [&] {
        auto *EltTy =
          _struct_RTStackFormat__InstanceLeaf(M);
        return ArrayType::get(EltTy, 1);
      }(),
      [&] {
        auto *EltTy =
          IntegerType::get(M.getContext(), 32);
        return ArrayType::get(EltTy, 1);
      }(),
      [&] {
        auto *EltTy =
          IntegerType::get(M.getContext(), 8);
        return ArrayType::get(EltTy, 124);
      }(),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__InternalNode(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::InternalNode";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      [&] {
        auto *EltTy =
          Type::getFloatTy(M.getContext());
        return ArrayType::get(EltTy, 3);
      }(),
      IntegerType::get(M.getContext(), 32),
      IntegerType::get(M.getContext(), 8),
      IntegerType::get(M.getContext(), 8),
      IntegerType::get(M.getContext(), 8),
      IntegerType::get(M.getContext(), 8),
      IntegerType::get(M.getContext(), 8),
      IntegerType::get(M.getContext(), 8),
      [&] {
        auto *EltTy =
          _struct_RTStackFormat__InternalNode__ChildData(M);
        return ArrayType::get(EltTy, 6);
      }(),
      [&] {
        auto *EltTy =
          IntegerType::get(M.getContext(), 8);
        return ArrayType::get(EltTy, 6);
      }(),
      [&] {
        auto *EltTy =
          IntegerType::get(M.getContext(), 8);
        return ArrayType::get(EltTy, 6);
      }(),
      [&] {
        auto *EltTy =
          IntegerType::get(M.getContext(), 8);
        return ArrayType::get(EltTy, 6);
      }(),
      [&] {
        auto *EltTy =
          IntegerType::get(M.getContext(), 8);
        return ArrayType::get(EltTy, 6);
      }(),
      [&] {
        auto *EltTy =
          IntegerType::get(M.getContext(), 8);
        return ArrayType::get(EltTy, 6);
      }(),
      [&] {
        auto *EltTy =
          IntegerType::get(M.getContext(), 8);
        return ArrayType::get(EltTy, 6);
      }(),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _struct_RTStackFormat__InternalNode__ChildData(Module &M)
{
  return
  [&] {
    StringRef StructName = "struct.RTStackFormat::InternalNode::ChildData";
    if (auto *Ty = IGCLLVM::getTypeByName(M, StructName))
      return Ty;
    Type* Tys[] = {
      IntegerType::get(M.getContext(), 8),
    };
    return StructType::create(M.getContext(), Tys, StructName, false);
  }();
}
static Type* _gettype_RTStack2(Module &M)
{
  return
  _struct_RTStackFormat__RTStack(M);
}

static Type* _gettype_HWRayData2(Module &M)
{
  return
  _struct_RTStackFormat__HWRayData(M);
}

static Type* _gettype_RayQueryObject2(Module &M)
{
  return
  _struct_RTStackFormat__RayQueryObject(M);
}

static Type* _gettype_SMStack2(Module &M)
{
  return
  _struct_RTStackFormat__SMStack(M);
}

static Type* _gettype_SMRayData2(Module &M)
{
  return
  _struct_RTStackFormat__SMRayData(M);
}

static Type* _gettype_SWHotZone_v1(Module &M)
{
  return
  _struct_RTStackFormat__SWHotZone_v1(M);
}

static Type* _gettype_SWHotZone_v2(Module &M)
{
  return
  _struct_RTStackFormat__SWHotZone_v2(M);
}

static Type* _gettype_RayDispatchGlobalData(Module &M)
{
  return
  _struct_IGC__RayDispatchGlobalData(M);
}

static Type* _gettype_InstanceLeaf(Module &M)
{
  return
  _struct_RTStackFormat__InstanceLeaf(M);
}

static Type* _gettype_QuadLeaf(Module &M)
{
  return
  _struct_RTStackFormat__QuadLeaf(M);
}

static Type* _gettype_ProceduralLeaf(Module &M)
{
  return
  _struct_RTStackFormat__ProceduralLeaf(M);
}

static Type* _gettype_RTGlobalsAndRootSig(Module &M, Type* TypeHoleGlobalRootSig)
{
  return
  _struct_IGC__RTGlobalsAndRootSig(M, TypeHoleGlobalRootSig);
}

static Type* _gettype_BVH(Module &M)
{
  return
  _struct_RTStackFormat__BVH(M);
}

Value* _gepof_rtMemBasePtr(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_callStackHandlerPtr(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(1),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_stackSizePerRay(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(2),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_numDSSRTStacks(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(3),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_maxBVHLevels(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(4),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_paddingBits(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(5),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_hitGroupBasePtr(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(6),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_missShaderBasePtr(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(7),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_callableShaderBasePtr(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(8),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_hitGroupStride(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(9),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_missShaderStride(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(10),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_callableShaderStride(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(11),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_printfBufferBasePtr(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(13),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_statelessScratchPtr(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(15),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_pCallableShaderBasePtr(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(16),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_pCallableShaderStride(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(17),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_bindlessHeapBasePtr(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(19),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_pHitGroupBasePtr(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(20),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_pMissShaderBasePtr(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(21),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_pHitGroupStride(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(22),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_pMissShaderStride(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(23),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_pRtMemBasePtr(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(24),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_pStackSizePerRay(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(26),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_swStackSizePerRay(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(27),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_pNumDSSRTStacks(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(28),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_baseSSHOffset(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(25),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_BVH_rootNodeOffset(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_dispatchRaysDimensions(Value* p, Value* idx1, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(29),
    idx1,
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_dispRaysIndex_v2(Value* p, Value* idx1, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(1),
    idx1,
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_StackOffset_v2(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_CompressedDispatchRayIndices_v1(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(1),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_StackOffset_v1(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_BudgeBits_v1(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_CommittedHitT(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_CommittedHitT2(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_PotentialHitT(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_CommittedHitU(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(1),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_PotentialHitU(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(1),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_CommittedHitTopOfInstLeafPtr(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(5),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_PotentialHitTopOfInstLeafPtr(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(5),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_CommittedHitTopOfPrimLeafPtr(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(4),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_PotentialHitTopOfPrimLeafPtr(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(4),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_CommittedHitTopOfPrimIndexDelta(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(3),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_PotentialHitTopOfPrimIndexDelta(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(3),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_CommittedHitFrontFaceDword(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(3),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_PotentialHitFrontFaceDword(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(3),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_topOfNodePtrAndFlags(Value* p, Value* idx1, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(2),
    idx1,
    this->getInt32(4),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_hitGroupShaderRecordInfo(Value* p, Value* idx1, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(2),
    idx1,
    this->getInt32(4),
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_missShaderRecordInfo(Value* p, Value* idx1, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(2),
    idx1,
    this->getInt32(4),
    this->getInt32(0),
    this->getInt32(2),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_topOfInstanceLeafPtr(Value* p, Value* idx1, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(2),
    idx1,
    this->getInt32(4),
    this->getInt32(0),
    this->getInt32(3),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_MemRay_org(Value* p, Value* idx1, Value* idx2, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(2),
    idx1,
    this->getInt32(0),
    idx2,
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_MemRay_dir(Value* p, Value* idx1, Value* idx2, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(2),
    idx1,
    this->getInt32(1),
    idx2,
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_MemRay_tnear(Value* p, Value* idx1, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(2),
    idx1,
    this->getInt32(2),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_MemRay_tfar(Value* p, Value* idx1, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(2),
    idx1,
    this->getInt32(3),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_RQO_rtStack(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_RQO_TRCtrl(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_InstanceLeaf_instanceID(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(1),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_InstanceLeaf_instanceIndex(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(2),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_InstanceLeaf_world2obj_vx(Value* p, Value* idx1, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(1),
    idx1,
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_InstanceLeaf_world2obj_vy(Value* p, Value* idx1, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(2),
    idx1,
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_InstanceLeaf_world2obj_vz(Value* p, Value* idx1, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(3),
    idx1,
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_InstanceLeaf_obj2world_p(Value* p, Value* idx1, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(4),
    idx1,
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_InstanceLeaf_obj2world_vx(Value* p, Value* idx1, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(3),
    idx1,
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_InstanceLeaf_obj2world_vy(Value* p, Value* idx1, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(4),
    idx1,
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_InstanceLeaf_obj2world_vz(Value* p, Value* idx1, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(5),
    idx1,
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_InstanceLeaf_world2obj_p(Value* p, Value* idx1, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(6),
    idx1,
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_InstanceLeaf_instContToHitGroupIndex(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_QuadLeaf_primIndex0(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(1),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_QuadLeaf_topOfGeomIndex(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_ProceduralLeaf__primIndex(Value* p, Value* idx1, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(2),
    idx1,
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

Value* _gepof_ProceduralLeaf_topOfGeomIndex(Value* p, const Twine &Name = "")
{
  Value* Indices[] = {
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(1),
    this->getInt32(0),
    this->getInt32(0),
    this->getInt32(0),
  };
  return this->CreateInBoundsGEP(p, Indices, Name);
}

