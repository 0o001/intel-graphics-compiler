From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: KornevNikita <33487926+KornevNikita@users.noreply.github.com>
Date: Wed, 3 Mar 2021 14:08:19 +0300
Subject: [PATCH] [SPIRV] Encode debug info producer in SPIR-V (#924)

* [SPIRV] Encode debug info producer in SPIR-V

This is a workaround to keep debug info producer information throughout the
translation. We need it because the debug info specification doesn't provide
means to carry this information.
---
 lib/SPIRV/LLVMToSPIRVDbgTran.cpp     |  1 +
 lib/SPIRV/SPIRVToLLVMDbgTran.cpp     | 13 +++++-
 lib/SPIRV/SPIRVToLLVMDbgTran.h       |  1 +
 lib/SPIRV/libSPIRV/SPIRV.debug.h     |  1 +
 lib/SPIRV/libSPIRV/SPIRVEntry.cpp    | 16 ++++++++
 lib/SPIRV/libSPIRV/SPIRVEntry.h      | 21 ++++++++++
 lib/SPIRV/libSPIRV/SPIRVModule.cpp   | 16 +++++++-
 lib/SPIRV/libSPIRV/SPIRVModule.h     |  3 ++
 lib/SPIRV/libSPIRV/SPIRVOpCodeEnum.h |  1 +
 test/DebugInfo/DebugInfoProducer.ll  | 60 ++++++++++++++++++++++++++++
 10 files changed, 130 insertions(+), 3 deletions(-)
 create mode 100644 test/DebugInfo/DebugInfoProducer.ll

diff --git a/lib/SPIRV/LLVMToSPIRVDbgTran.cpp b/lib/SPIRV/LLVMToSPIRVDbgTran.cpp
index 00000000..00000000 100644
--- a/lib/SPIRV/LLVMToSPIRVDbgTran.cpp
+++ b/lib/SPIRV/LLVMToSPIRVDbgTran.cpp
@@ -463,6 +463,7 @@ LLVMToSPIRVDbgTran::transDbgCompilationUnit(const DICompileUnit *CU) {
   Ops[DWARFVersionIdx] = M->getDwarfVersion();
   Ops[SourceIdx] = getSource(CU)->getId();
   Ops[LanguageIdx] = CU->getSourceLanguage();
+  BM->addModuleProcessed(SPIRVDebug::ProducerPrefix + CU->getProducer().str());
   // Cache CU in a member.
   SPIRVCU = static_cast<SPIRVExtInst *>(
       BM->addDebugInfo(SPIRVDebug::CompilationUnit, getVoidTy(), Ops));
diff --git a/lib/SPIRV/SPIRVToLLVMDbgTran.cpp b/lib/SPIRV/SPIRVToLLVMDbgTran.cpp
index 00000000..00000000 100644
--- a/lib/SPIRV/SPIRVToLLVMDbgTran.cpp
+++ b/lib/SPIRV/SPIRVToLLVMDbgTran.cpp
@@ -120,7 +120,8 @@ SPIRVToLLVMDbgTran::transCompileUnit(const SPIRVExtInst *DebugInst) {
   SPIRVId FileId = Source->getArguments()[SPIRVDebug::Operand::Source::FileIdx];
   std::string File = getString(FileId);
   unsigned SourceLang = Ops[LanguageIdx];
-  CU = Builder.createCompileUnit(SourceLang, getDIFile(File), "spirv", false,
+  auto Producer = findModuleProducer();
+  CU = Builder.createCompileUnit(SourceLang, getDIFile(File), Producer, false,
                                  "", 0);
   return CU;
 }
@@ -992,4 +993,14 @@ SPIRVToLLVMDbgTran::SplitFileName::SplitFileName(const string &FileName) {
   }
 }
 
+std::string SPIRVToLLVMDbgTran::findModuleProducer() {
+  for (const auto &I : BM->getModuleProcessedVec()) {
+    if (I->getProcessStr().find(SPIRVDebug::ProducerPrefix) !=
+        std::string::npos) {
+      return I->getProcessStr().substr(SPIRVDebug::ProducerPrefix.size());
+    }
+  }
+  return "spirv";
+}
+
 } // namespace SPIRV
diff --git a/lib/SPIRV/SPIRVToLLVMDbgTran.h b/lib/SPIRV/SPIRVToLLVMDbgTran.h
index 00000000..00000000 100644
--- a/lib/SPIRV/SPIRVToLLVMDbgTran.h
+++ b/lib/SPIRV/SPIRVToLLVMDbgTran.h
@@ -173,6 +173,7 @@ private:
     return nullptr;
   }
   StringRef getString(const SPIRVId Id);
+  std::string findModuleProducer();
 };
 } // namespace SPIRV
 
diff --git a/lib/SPIRV/libSPIRV/SPIRV.debug.h b/lib/SPIRV/libSPIRV/SPIRV.debug.h
index 00000000..00000000 100644
--- a/lib/SPIRV/libSPIRV/SPIRV.debug.h
+++ b/lib/SPIRV/libSPIRV/SPIRV.debug.h
@@ -6,6 +6,7 @@
 namespace SPIRVDebug {
 
 const unsigned int DebugInfoVersion = 0x00010000;
+static const std::string ProducerPrefix = {"Debug info producer: "};
 
 // clang-format off
 
diff --git a/lib/SPIRV/libSPIRV/SPIRVEntry.cpp b/lib/SPIRV/libSPIRV/SPIRVEntry.cpp
index 00000000..00000000 100644
--- a/lib/SPIRV/libSPIRV/SPIRVEntry.cpp
+++ b/lib/SPIRV/libSPIRV/SPIRVEntry.cpp
@@ -656,4 +656,20 @@ void SPIRVCapability::decode(std::istream &I) {
   Module->addCapability(Kind);
 }
 
+void SPIRVModuleProcessed::validate() const {
+  assert(WordCount == FixedWC + getSizeInWords(ProcessStr) &&
+         "Incorrect word count in OpModuleProcessed");
+}
+
+void SPIRVModuleProcessed::encode(spv_ostream &O) const {
+  getEncoder(O) << ProcessStr;
+}
+
+void SPIRVModuleProcessed::decode(std::istream &I) {
+  getDecoder(I) >> ProcessStr;
+  Module->addModuleProcessed(ProcessStr);
+}
+
+std::string SPIRVModuleProcessed::getProcessStr() { return ProcessStr; }
+
 } // namespace SPIRV
diff --git a/lib/SPIRV/libSPIRV/SPIRVEntry.h b/lib/SPIRV/libSPIRV/SPIRVEntry.h
index 00000000..00000000 100644
--- a/lib/SPIRV/libSPIRV/SPIRVEntry.h
+++ b/lib/SPIRV/libSPIRV/SPIRVEntry.h
@@ -846,6 +846,27 @@ template <spv::Op OC> bool isa(SPIRVEntry *E) {
   return E ? E->getOpCode() == OC : false;
 }
 
+class SPIRVModuleProcessed : public SPIRVEntryNoId<OpModuleProcessed> {
+public:
+  SPIRVModuleProcessed(SPIRVModule *M, const std::string &Process)
+      : SPIRVEntryNoId(M, FixedWC + getSizeInWords(Process)),
+        ProcessStr(Process) {
+    updateModuleVersion();
+  }
+  SPIRVModuleProcessed() { updateModuleVersion(); }
+  _SPIRV_DCL_ENCDEC
+  void validate() const override;
+  SPIRVWord getRequiredSPIRVVersion() const override {
+    return static_cast<SPIRVWord>(VersionNumber::SPIRV_1_1);
+  }
+
+  std::string getProcessStr();
+
+private:
+  std::string ProcessStr;
+  static const SPIRVWord FixedWC = 1;
+};
+
 // ToDo: The following typedef's are place holders for SPIRV entity classes
 // to be implemented.
 // Each time a new class is implemented, remove the corresponding typedef.
diff --git a/lib/SPIRV/libSPIRV/SPIRVModule.cpp b/lib/SPIRV/libSPIRV/SPIRVModule.cpp
index 00000000..00000000 100644
--- a/lib/SPIRV/libSPIRV/SPIRVModule.cpp
+++ b/lib/SPIRV/libSPIRV/SPIRVModule.cpp
@@ -292,6 +292,8 @@ public:
                                SPIRVInstruction * = nullptr) override;
   SPIRVEntry *addDebugInfo(SPIRVWord, SPIRVType *TheType,
                            const std::vector<SPIRVWord> &) override;
+  SPIRVEntry *addModuleProcessed(const std::string &) override;
+  std::vector<SPIRVModuleProcessed *> getModuleProcessedVec() override;
   SPIRVInstruction *addBinaryInst(Op, SPIRVType *, SPIRVValue *, SPIRVValue *,
                                   SPIRVBasicBlock *) override;
   SPIRVInstruction *addCallInst(SPIRVFunction *, const std::vector<SPIRVWord> &,
@@ -489,6 +491,7 @@ private:
   std::map<unsigned, SPIRVTypeInt *> IntTypeMap;
   std::map<unsigned, SPIRVConstant *> LiteralMap;
   std::vector<SPIRVExtInst *> DebugInstVec;
+  std::vector<SPIRVModuleProcessed *> ModuleProcessedVec;
 
   void layoutEntry(SPIRVEntry *Entry);
 };
@@ -1219,6 +1222,15 @@ SPIRVEntry *SPIRVModuleImpl::addDebugInfo(SPIRVWord InstId, SPIRVType *TheType,
                        ExtInstSetIds[getDebugInfoEIS()], InstId, Args));
 }
 
+SPIRVEntry *SPIRVModuleImpl::addModuleProcessed(const std::string &Process) {
+  ModuleProcessedVec.push_back(new SPIRVModuleProcessed(this, Process));
+  return ModuleProcessedVec.back();
+}
+
+std::vector<SPIRVModuleProcessed *> SPIRVModuleImpl::getModuleProcessedVec() {
+  return ModuleProcessedVec;
+}
+
 SPIRVInstruction *
 SPIRVModuleImpl::addCallInst(SPIRVFunction *TheFunction,
                              const std::vector<SPIRVWord> &TheArguments,
@@ -1655,8 +1667,8 @@ spv_ostream &operator<<(spv_ostream &O, SPIRVModule &M) {
       M.getEntry(I)->encodeName(O);
   }
 
-  O << MI.MemberNameVec << MI.DecGroupVec << MI.DecorateSet << MI.GroupDecVec
-    << MI.ForwardPointerVec
+  O << MI.MemberNameVec << MI.ModuleProcessedVec << MI.DecGroupVec
+    << MI.DecorateSet << MI.GroupDecVec << MI.ForwardPointerVec
     << TopologicalSort(MI.TypeVec, MI.ConstVec, MI.VariableVec,
                        MI.ForwardPointerVec);
 
diff --git a/lib/SPIRV/libSPIRV/SPIRVModule.h b/lib/SPIRV/libSPIRV/SPIRVModule.h
index 00000000..00000000 100644
--- a/lib/SPIRV/libSPIRV/SPIRVModule.h
+++ b/lib/SPIRV/libSPIRV/SPIRVModule.h
@@ -292,6 +292,7 @@ public:
                                        SPIRVInstruction * = nullptr) = 0;
   virtual SPIRVEntry *addDebugInfo(SPIRVWord, SPIRVType *,
                                    const std::vector<SPIRVWord> &) = 0;
+  virtual SPIRVEntry *addModuleProcessed(const std::string &) = 0;
   virtual void addCapability(SPIRVCapabilityKind) = 0;
   template <typename T> void addCapabilities(const T &Caps) {
     for (auto I : Caps)
@@ -462,6 +463,8 @@ public:
     return TranslationOpts.isGenArgNameMDEnabled();
   }
 
+  virtual std::vector<SPIRVModuleProcessed *> getModuleProcessedVec() = 0;
+
   bool getSpecializationConstant(SPIRVWord SpecId, uint64_t &ConstValue) {
     return TranslationOpts.getSpecializationConstant(SpecId, ConstValue);
   }
diff --git a/lib/SPIRV/libSPIRV/SPIRVOpCodeEnum.h b/lib/SPIRV/libSPIRV/SPIRVOpCodeEnum.h
index 00000000..00000000 100644
--- a/lib/SPIRV/libSPIRV/SPIRVOpCodeEnum.h
+++ b/lib/SPIRV/libSPIRV/SPIRVOpCodeEnum.h
@@ -294,6 +294,7 @@ _SPIRV_OP(AtomicFlagClear, 319)
 _SPIRV_OP(TypePipeStorage, 322)
 _SPIRV_OP(ConstantPipeStorage, 323)
 _SPIRV_OP(CreatePipeFromPipeStorage, 324)
+_SPIRV_OP(ModuleProcessed, 330)
 _SPIRV_OP(GroupNonUniformElect, 333)
 _SPIRV_OP(GroupNonUniformAll, 334)
 _SPIRV_OP(GroupNonUniformAny, 335)
diff --git a/test/DebugInfo/DebugInfoProducer.ll b/test/DebugInfo/DebugInfoProducer.ll
new file mode 100644
index 00000000..00000000
--- /dev/null
+++ b/test/DebugInfo/DebugInfoProducer.ll
@@ -0,0 +1,60 @@
+; Test checks debug info of producer is preserved from LLVM IR to spirv
+; and spirv to LLVM IR translation.
+
+; Original .cpp source:
+;
+;  int main() {
+;    return 0;
+;  }
+
+; Command line:
+; ./clang -cc1 -debug-info-kind=standalone -v s.cpp -S -emit-llvm -triple spir
+
+; RUN: llvm-as %s -o %t.bc
+; RUN: llvm-spirv %t.bc -spirv-text -o - | FileCheck %s --check-prefix CHECK-SPIRV
+; RUN: llvm-spirv %t.bc -o %t.spv
+; RUN: llvm-spirv -r %t.spv -o %t.rev.bc
+; RUN: llvm-dis %t.rev.bc -o %t.rev.ll
+; RUN: FileCheck %s --input-file %t.rev.ll --check-prefix CHECK-LLVM
+
+; ModuleID = 's.bc'
+source_filename = "s.cpp"
+target datalayout = "e-p:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-n8:16:32:64"
+target triple = "spir"
+
+; Function Attrs: noinline norecurse nounwind optnone
+define i32 @main() #0 !dbg !8 {
+entry:
+  %retval = alloca i32, align 4
+  store i32 0, i32* %retval, align 4
+  ret i32 0, !dbg !13
+}
+
+attributes #0 = { noinline norecurse nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
+
+!llvm.dbg.cu = !{!0}
+!llvm.module.flags = !{!3, !4, !5, !6}
+!opencl.used.extensions = !{!2}
+!opencl.used.optional.core.features = !{!2}
+!opencl.compiler.options = !{!2}
+!llvm.ident = !{!7}
+
+; CHECK-LLVM: !DICompileUnit
+; CHECK-LLVM-SAME: producer: "clang version 13.0.0 (https://github.com/llvm/llvm-project.git 16a50c9e642fd085e5ceb68c403b71b5b2e0607c)"
+; CHECK-LLVM-NOT: producer: "spirv"
+; CHECK-SPIRV: ModuleProcessed "Debug info producer: clang version 13.0.0 (https://github.com/llvm/llvm-project.git 16a50c9e642fd085e5ceb68c403b71b5b2e0607c)"
+
+!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "clang version 13.0.0 (https://github.com/llvm/llvm-project.git 16a50c9e642fd085e5ceb68c403b71b5b2e0607c)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, nameTableKind: None)
+!1 = !DIFile(filename: "<stdin>", directory: "oneAPI")
+!2 = !{}
+!3 = !{i32 2, !"Debug Info Version", i32 3}
+!4 = !{i32 1, !"wchar_size", i32 4}
+!5 = !{i32 1, !"ThinLTO", i32 0}
+!6 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
+!7 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git 16a50c9e642fd085e5ceb68c403b71b5b2e0607c)"}
+!8 = distinct !DISubprogram(name: "main", scope: !9, file: !9, line: 1, type: !10, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
+!9 = !DIFile(filename: "s.cpp", directory: "C:\\")
+!10 = !DISubroutineType(types: !11)
+!11 = !{!12}
+!12 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
+!13 = !DILocation(line: 2, column: 2, scope: !8)
-- 
2.29.2

