/*===================== begin_copyright_notice ==================================

Copyright (c) 2017 Intel Corporation

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


======================= end_copyright_notice ==================================*/

/*
 * !!! DO NOT EDIT THIS FILE !!!
 *
 * This file was automagically crafted by GED's model parser.
 */

#include "xcoder/ged_internal_api.h"
#include "ged_decoding_tables.h"
#include "ged_mapping_tables.h"
#include "ged_encoding_masks_tables.h"
#include "ged_disassembly_tables.h"
#include "ged_model_gen12_1.h"

namespace GEN12_1
{

/*!
 * Top level decoding table in the decoding chain for the format flowControl.
 * The indices for the table are the GED_INS_FIELD enumerator values.
 */
static ged_ins_decoding_table_t flowControlDecoding = DecodingTable431;

/*!
 * Top level encoding masks table in the encoding chain for the format flowControl.
 * The table is a list of encoding masks entries terminated by a NO_MASKS entry.
 */
static ged_instruction_masks_table_t flowControlEncodingMasks = EncodingMasksTable129;

#if GED_DISASSEMBLY

/*!
 * Top level disassembly table in the disassembly chain for the format flowControl.
 * The table is a list of disassembly table pointers, terminated by a NULL.
 */
static ged_disassembly_table_t flowControlDisassembly = DisassemblyBlockTable255;
#endif // GED_DISASSEMBLY

/*!
 * Top level decoding table in the decoding chain for the format illegal.
 * The indices for the table are the GED_INS_FIELD enumerator values.
 */
static ged_ins_decoding_table_t illegalDecoding = DecodingTable432;

/*!
 * Top level encoding masks table in the encoding chain for the format illegal.
 * The table is a list of encoding masks entries terminated by a NO_MASKS entry.
 */
static ged_instruction_masks_table_t illegalEncodingMasks = EncodingMasksTable10;

#if GED_DISASSEMBLY

/*!
 * Top level disassembly table in the disassembly chain for the format illegal.
 * The table is a list of disassembly table pointers, terminated by a NULL.
 */
static ged_disassembly_table_t illegalDisassembly = DisassemblyBlockTable48;
#endif // GED_DISASSEMBLY

/*!
 * Top level decoding table in the decoding chain for the format math.
 * The indices for the table are the GED_INS_FIELD enumerator values.
 */
static ged_ins_decoding_table_t mathDecoding = DecodingTable433;

/*!
 * Top level encoding masks table in the encoding chain for the format math.
 * The table is a list of encoding masks entries terminated by a NO_MASKS entry.
 */
static ged_instruction_masks_table_t mathEncodingMasks = EncodingMasksTable126;

#if GED_DISASSEMBLY

/*!
 * Top level disassembly table in the disassembly chain for the format math.
 * The table is a list of disassembly table pointers, terminated by a NULL.
 */
static ged_disassembly_table_t mathDisassembly = DisassemblyBlockTable255;
#endif // GED_DISASSEMBLY

/*!
 * Top level decoding table in the decoding chain for the format nop.
 * The indices for the table are the GED_INS_FIELD enumerator values.
 */
static ged_ins_decoding_table_t nopDecoding = DecodingTable434;

/*!
 * Top level encoding masks table in the encoding chain for the format nop.
 * The table is a list of encoding masks entries terminated by a NO_MASKS entry.
 */
static ged_instruction_masks_table_t nopEncodingMasks = EncodingMasksTable119;

#if GED_DISASSEMBLY

/*!
 * Top level disassembly table in the disassembly chain for the format nop.
 * The table is a list of disassembly table pointers, terminated by a NULL.
 */
static ged_disassembly_table_t nopDisassembly = DisassemblyBlockTable50;
#endif // GED_DISASSEMBLY

/*!
 * Top level decoding table in the decoding chain for the format oneSourceCommon.
 * The indices for the table are the GED_INS_FIELD enumerator values.
 */
static ged_ins_decoding_table_t oneSourceCommonDecoding = DecodingTable435;

/*!
 * Top level encoding masks table in the encoding chain for the format oneSourceCommon.
 * The table is a list of encoding masks entries terminated by a NO_MASKS entry.
 */
static ged_instruction_masks_table_t oneSourceCommonEncodingMasks = EncodingMasksTable117;

#if GED_DISASSEMBLY

/*!
 * Top level disassembly table in the disassembly chain for the format oneSourceCommon.
 * The table is a list of disassembly table pointers, terminated by a NULL.
 */
static ged_disassembly_table_t oneSourceCommonDisassembly = DisassemblyBlockTable255;
#endif // GED_DISASSEMBLY

/*!
 * Top level decoding table in the decoding chain for the format oneSourceCompact.
 * The indices for the table are the GED_INS_FIELD enumerator values.
 */
static ged_ins_decoding_table_t oneSourceCompactDecoding = DecodingTable436;

/*!
 * Top level encoding masks table in the encoding chain for the format oneSourceCompact.
 * The table is a list of encoding masks entries terminated by a NO_MASKS entry.
 */
static ged_instruction_masks_table_t oneSourceCompactEncodingMasks = EncodingMasksTable130;

/*!
 * Top level mapping table in the mapping chain for the compact instruction format oneSourceCompact.
 * The indices for the table are the GED_INS_FIELD enumerator values.
 */
static ged_compact_mapping_table_t oneSourceCompactMapping = MappingTable39;

/*!
 * Top level decoding table in the decoding chain for the format send.
 * The indices for the table are the GED_INS_FIELD enumerator values.
 */
static ged_ins_decoding_table_t sendDecoding = DecodingTable437;

/*!
 * Top level encoding masks table in the encoding chain for the format send.
 * The table is a list of encoding masks entries terminated by a NO_MASKS entry.
 */
static ged_instruction_masks_table_t sendEncodingMasks = EncodingMasksTable124;

#if GED_DISASSEMBLY

/*!
 * Top level disassembly table in the disassembly chain for the format send.
 * The table is a list of disassembly table pointers, terminated by a NULL.
 */
static ged_disassembly_table_t sendDisassembly = DisassemblyBlockTable257;
#endif // GED_DISASSEMBLY

/*!
 * Top level decoding table in the decoding chain for the format sync.
 * The indices for the table are the GED_INS_FIELD enumerator values.
 */
static ged_ins_decoding_table_t syncDecoding = DecodingTable438;

/*!
 * Top level encoding masks table in the encoding chain for the format sync.
 * The table is a list of encoding masks entries terminated by a NO_MASKS entry.
 */
static ged_instruction_masks_table_t syncEncodingMasks = EncodingMasksTable118;

#if GED_DISASSEMBLY

/*!
 * Top level disassembly table in the disassembly chain for the format sync.
 * The table is a list of disassembly table pointers, terminated by a NULL.
 */
static ged_disassembly_table_t syncDisassembly = DisassemblyBlockTable255;
#endif // GED_DISASSEMBLY

/*!
 * Top level decoding table in the decoding chain for the format threeSource.
 * The indices for the table are the GED_INS_FIELD enumerator values.
 */
static ged_ins_decoding_table_t threeSourceDecoding = DecodingTable439;

/*!
 * Top level encoding masks table in the encoding chain for the format threeSource.
 * The table is a list of encoding masks entries terminated by a NO_MASKS entry.
 */
static ged_instruction_masks_table_t threeSourceEncodingMasks = EncodingMasksTable121;

#if GED_DISASSEMBLY

/*!
 * Top level disassembly table in the disassembly chain for the format threeSource.
 * The table is a list of disassembly table pointers, terminated by a NULL.
 */
static ged_disassembly_table_t threeSourceDisassembly = DisassemblyBlockTable256;
#endif // GED_DISASSEMBLY

/*!
 * Top level decoding table in the decoding chain for the format threeSourceCompact.
 * The indices for the table are the GED_INS_FIELD enumerator values.
 */
static ged_ins_decoding_table_t threeSourceCompactDecoding = DecodingTable440;

/*!
 * Top level encoding masks table in the encoding chain for the format threeSourceCompact.
 * The table is a list of encoding masks entries terminated by a NO_MASKS entry.
 */
static ged_instruction_masks_table_t threeSourceCompactEncodingMasks = EncodingMasksTable130;

/*!
 * Top level mapping table in the mapping chain for the compact instruction format threeSourceCompact.
 * The indices for the table are the GED_INS_FIELD enumerator values.
 */
static ged_compact_mapping_table_t threeSourceCompactMapping = MappingTable40;

/*!
 * Top level decoding table in the decoding chain for the format twoSourceCommon.
 * The indices for the table are the GED_INS_FIELD enumerator values.
 */
static ged_ins_decoding_table_t twoSourceCommonDecoding = DecodingTable441;

/*!
 * Top level encoding masks table in the encoding chain for the format twoSourceCommon.
 * The table is a list of encoding masks entries terminated by a NO_MASKS entry.
 */
static ged_instruction_masks_table_t twoSourceCommonEncodingMasks = EncodingMasksTable114;

#if GED_DISASSEMBLY

/*!
 * Top level disassembly table in the disassembly chain for the format twoSourceCommon.
 * The table is a list of disassembly table pointers, terminated by a NULL.
 */
static ged_disassembly_table_t twoSourceCommonDisassembly = DisassemblyBlockTable255;
#endif // GED_DISASSEMBLY

/*!
 * Top level decoding table in the decoding chain for the format twoSourceCompact.
 * The indices for the table are the GED_INS_FIELD enumerator values.
 */
static ged_ins_decoding_table_t twoSourceCompactDecoding = DecodingTable442;

/*!
 * Top level encoding masks table in the encoding chain for the format twoSourceCompact.
 * The table is a list of encoding masks entries terminated by a NO_MASKS entry.
 */
static ged_instruction_masks_table_t twoSourceCompactEncodingMasks = EncodingMasksTable130;

/*!
 * Top level mapping table in the mapping chain for the compact instruction format twoSourceCompact.
 * The indices for the table are the GED_INS_FIELD enumerator values.
 */
static ged_compact_mapping_table_t twoSourceCompactMapping = MappingTable41;
OpcodeTables Opcodes[128] =
{
    illegalDecoding, illegalEncodingMasks, NULL, NULL, NULL, // 0
    syncDecoding, syncEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 1
    NULL, NULL, NULL, NULL, NULL, // 2
    NULL, NULL, NULL, NULL, NULL, // 3
    NULL, NULL, NULL, NULL, NULL, // 4
    NULL, NULL, NULL, NULL, NULL, // 5
    NULL, NULL, NULL, NULL, NULL, // 6
    NULL, NULL, NULL, NULL, NULL, // 7
    NULL, NULL, NULL, NULL, NULL, // 8
    NULL, NULL, NULL, NULL, NULL, // 9
    NULL, NULL, NULL, NULL, NULL, // 10
    NULL, NULL, NULL, NULL, NULL, // 11
    NULL, NULL, NULL, NULL, NULL, // 12
    NULL, NULL, NULL, NULL, NULL, // 13
    NULL, NULL, NULL, NULL, NULL, // 14
    NULL, NULL, NULL, NULL, NULL, // 15
    NULL, NULL, NULL, NULL, NULL, // 16
    NULL, NULL, NULL, NULL, NULL, // 17
    NULL, NULL, NULL, NULL, NULL, // 18
    NULL, NULL, NULL, NULL, NULL, // 19
    NULL, NULL, NULL, NULL, NULL, // 20
    NULL, NULL, NULL, NULL, NULL, // 21
    NULL, NULL, NULL, NULL, NULL, // 22
    NULL, NULL, NULL, NULL, NULL, // 23
    NULL, NULL, NULL, NULL, NULL, // 24
    NULL, NULL, NULL, NULL, NULL, // 25
    NULL, NULL, NULL, NULL, NULL, // 26
    NULL, NULL, NULL, NULL, NULL, // 27
    NULL, NULL, NULL, NULL, NULL, // 28
    NULL, NULL, NULL, NULL, NULL, // 29
    NULL, NULL, NULL, NULL, NULL, // 30
    NULL, NULL, NULL, NULL, NULL, // 31
    flowControlDecoding, flowControlEncodingMasks, NULL, NULL, NULL, // 32
    flowControlDecoding, flowControlEncodingMasks, NULL, NULL, NULL, // 33
    flowControlDecoding, flowControlEncodingMasks, NULL, NULL, NULL, // 34
    flowControlDecoding, flowControlEncodingMasks, NULL, NULL, NULL, // 35
    flowControlDecoding, flowControlEncodingMasks, NULL, NULL, NULL, // 36
    flowControlDecoding, flowControlEncodingMasks, NULL, NULL, NULL, // 37
    NULL, NULL, NULL, NULL, NULL, // 38
    flowControlDecoding, flowControlEncodingMasks, NULL, NULL, NULL, // 39
    flowControlDecoding, flowControlEncodingMasks, NULL, NULL, NULL, // 40
    flowControlDecoding, flowControlEncodingMasks, NULL, NULL, NULL, // 41
    flowControlDecoding, flowControlEncodingMasks, NULL, NULL, NULL, // 42
    flowControlDecoding, flowControlEncodingMasks, NULL, NULL, NULL, // 43
    flowControlDecoding, flowControlEncodingMasks, NULL, NULL, NULL, // 44
    flowControlDecoding, flowControlEncodingMasks, NULL, NULL, NULL, // 45
    flowControlDecoding, flowControlEncodingMasks, NULL, NULL, NULL, // 46
    flowControlDecoding, flowControlEncodingMasks, NULL, NULL, NULL, // 47
    NULL, NULL, NULL, NULL, NULL, // 48
    sendDecoding, sendEncodingMasks, NULL, NULL, NULL, // 49
    sendDecoding, sendEncodingMasks, NULL, NULL, NULL, // 50
    NULL, NULL, NULL, NULL, NULL, // 51
    NULL, NULL, NULL, NULL, NULL, // 52
    NULL, NULL, NULL, NULL, NULL, // 53
    NULL, NULL, NULL, NULL, NULL, // 54
    NULL, NULL, NULL, NULL, NULL, // 55
    mathDecoding, mathEncodingMasks, NULL, NULL, NULL, // 56
    NULL, NULL, NULL, NULL, NULL, // 57
    NULL, NULL, NULL, NULL, NULL, // 58
    NULL, NULL, NULL, NULL, NULL, // 59
    NULL, NULL, NULL, NULL, NULL, // 60
    NULL, NULL, NULL, NULL, NULL, // 61
    NULL, NULL, NULL, NULL, NULL, // 62
    NULL, NULL, NULL, NULL, NULL, // 63
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 64
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 65
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 66
    oneSourceCommonDecoding, oneSourceCommonEncodingMasks, oneSourceCompactDecoding, oneSourceCompactEncodingMasks, oneSourceCompactMapping, // 67
    oneSourceCommonDecoding, oneSourceCommonEncodingMasks, oneSourceCompactDecoding, oneSourceCompactEncodingMasks, oneSourceCompactMapping, // 68
    oneSourceCommonDecoding, oneSourceCommonEncodingMasks, oneSourceCompactDecoding, oneSourceCompactEncodingMasks, oneSourceCompactMapping, // 69
    oneSourceCommonDecoding, oneSourceCommonEncodingMasks, oneSourceCompactDecoding, oneSourceCompactEncodingMasks, oneSourceCompactMapping, // 70
    oneSourceCommonDecoding, oneSourceCommonEncodingMasks, oneSourceCompactDecoding, oneSourceCompactEncodingMasks, oneSourceCompactMapping, // 71
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 72
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 73
    oneSourceCommonDecoding, oneSourceCommonEncodingMasks, oneSourceCompactDecoding, oneSourceCompactEncodingMasks, oneSourceCompactMapping, // 74
    oneSourceCommonDecoding, oneSourceCommonEncodingMasks, oneSourceCompactDecoding, oneSourceCompactEncodingMasks, oneSourceCompactMapping, // 75
    oneSourceCommonDecoding, oneSourceCommonEncodingMasks, oneSourceCompactDecoding, oneSourceCompactEncodingMasks, oneSourceCompactMapping, // 76
    oneSourceCommonDecoding, oneSourceCommonEncodingMasks, oneSourceCompactDecoding, oneSourceCompactEncodingMasks, oneSourceCompactMapping, // 77
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 78
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 79
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 80
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 81
    NULL, NULL, NULL, NULL, NULL, // 82
    NULL, NULL, NULL, NULL, NULL, // 83
    NULL, NULL, NULL, NULL, NULL, // 84
    NULL, NULL, NULL, NULL, NULL, // 85
    NULL, NULL, NULL, NULL, NULL, // 86
    NULL, NULL, NULL, NULL, NULL, // 87
    threeSourceDecoding, threeSourceEncodingMasks, threeSourceCompactDecoding, threeSourceCompactEncodingMasks, threeSourceCompactMapping, // 88
    NULL, NULL, NULL, NULL, NULL, // 89
    NULL, NULL, NULL, NULL, NULL, // 90
    threeSourceDecoding, threeSourceEncodingMasks, threeSourceCompactDecoding, threeSourceCompactEncodingMasks, threeSourceCompactMapping, // 91
    NULL, NULL, NULL, NULL, NULL, // 92
    NULL, NULL, NULL, NULL, NULL, // 93
    NULL, NULL, NULL, NULL, NULL, // 94
    NULL, NULL, NULL, NULL, NULL, // 95
    nopDecoding, nopEncodingMasks, NULL, NULL, NULL, // 96
    oneSourceCommonDecoding, oneSourceCommonEncodingMasks, oneSourceCompactDecoding, oneSourceCompactEncodingMasks, oneSourceCompactMapping, // 97
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 98
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 99
    oneSourceCommonDecoding, oneSourceCommonEncodingMasks, oneSourceCompactDecoding, oneSourceCompactEncodingMasks, oneSourceCompactMapping, // 100
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 101
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 102
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 103
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 104
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 105
    NULL, NULL, NULL, NULL, NULL, // 106
    NULL, NULL, NULL, NULL, NULL, // 107
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 108
    NULL, NULL, NULL, NULL, NULL, // 109
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 110
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 111
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 112
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 113
    threeSourceDecoding, threeSourceEncodingMasks, threeSourceCompactDecoding, threeSourceCompactEncodingMasks, threeSourceCompactMapping, // 114
    NULL, NULL, NULL, NULL, NULL, // 115
    NULL, NULL, NULL, NULL, NULL, // 116
    NULL, NULL, NULL, NULL, NULL, // 117
    NULL, NULL, NULL, NULL, NULL, // 118
    oneSourceCommonDecoding, oneSourceCommonEncodingMasks, oneSourceCompactDecoding, oneSourceCompactEncodingMasks, oneSourceCompactMapping, // 119
    threeSourceDecoding, threeSourceEncodingMasks, threeSourceCompactDecoding, threeSourceCompactEncodingMasks, threeSourceCompactMapping, // 120
    twoSourceCommonDecoding, twoSourceCommonEncodingMasks, twoSourceCompactDecoding, twoSourceCompactEncodingMasks, twoSourceCompactMapping, // 121
    threeSourceDecoding, threeSourceEncodingMasks, threeSourceCompactDecoding, threeSourceCompactEncodingMasks, threeSourceCompactMapping, // 122
    NULL, NULL, NULL, NULL, NULL, // 123
    NULL, NULL, NULL, NULL, NULL, // 124
    NULL, NULL, NULL, NULL, NULL, // 125
    NULL, NULL, NULL, NULL, NULL, // 126
    NULL, NULL, NULL, NULL, NULL // 127
}; // Opcodes[]

#if GED_DISASSEMBLY

/*!
 * This table maps every possible opcode value (even for non-existing opcodes) to its respective top level disassembly table. Opcodes
 * that are not supported in this model are mapped to a NULL pointer.
 */
static ged_disassembly_table_t DisassemblyTopLevel[128] =
{
    illegalDisassembly, // 0
    syncDisassembly, // 1
    NULL, // 2
    NULL, // 3
    NULL, // 4
    NULL, // 5
    NULL, // 6
    NULL, // 7
    NULL, // 8
    NULL, // 9
    NULL, // 10
    NULL, // 11
    NULL, // 12
    NULL, // 13
    NULL, // 14
    NULL, // 15
    NULL, // 16
    NULL, // 17
    NULL, // 18
    NULL, // 19
    NULL, // 20
    NULL, // 21
    NULL, // 22
    NULL, // 23
    NULL, // 24
    NULL, // 25
    NULL, // 26
    NULL, // 27
    NULL, // 28
    NULL, // 29
    NULL, // 30
    NULL, // 31
    flowControlDisassembly, // 32
    flowControlDisassembly, // 33
    flowControlDisassembly, // 34
    flowControlDisassembly, // 35
    flowControlDisassembly, // 36
    flowControlDisassembly, // 37
    NULL, // 38
    flowControlDisassembly, // 39
    flowControlDisassembly, // 40
    flowControlDisassembly, // 41
    flowControlDisassembly, // 42
    flowControlDisassembly, // 43
    flowControlDisassembly, // 44
    flowControlDisassembly, // 45
    flowControlDisassembly, // 46
    flowControlDisassembly, // 47
    NULL, // 48
    sendDisassembly, // 49
    sendDisassembly, // 50
    NULL, // 51
    NULL, // 52
    NULL, // 53
    NULL, // 54
    NULL, // 55
    mathDisassembly, // 56
    NULL, // 57
    NULL, // 58
    NULL, // 59
    NULL, // 60
    NULL, // 61
    NULL, // 62
    NULL, // 63
    twoSourceCommonDisassembly, // 64
    twoSourceCommonDisassembly, // 65
    twoSourceCommonDisassembly, // 66
    oneSourceCommonDisassembly, // 67
    oneSourceCommonDisassembly, // 68
    oneSourceCommonDisassembly, // 69
    oneSourceCommonDisassembly, // 70
    oneSourceCommonDisassembly, // 71
    twoSourceCommonDisassembly, // 72
    twoSourceCommonDisassembly, // 73
    oneSourceCommonDisassembly, // 74
    oneSourceCommonDisassembly, // 75
    oneSourceCommonDisassembly, // 76
    oneSourceCommonDisassembly, // 77
    twoSourceCommonDisassembly, // 78
    twoSourceCommonDisassembly, // 79
    twoSourceCommonDisassembly, // 80
    twoSourceCommonDisassembly, // 81
    NULL, // 82
    NULL, // 83
    NULL, // 84
    NULL, // 85
    NULL, // 86
    NULL, // 87
    threeSourceDisassembly, // 88
    NULL, // 89
    NULL, // 90
    threeSourceDisassembly, // 91
    NULL, // 92
    NULL, // 93
    NULL, // 94
    NULL, // 95
    nopDisassembly, // 96
    oneSourceCommonDisassembly, // 97
    twoSourceCommonDisassembly, // 98
    twoSourceCommonDisassembly, // 99
    oneSourceCommonDisassembly, // 100
    twoSourceCommonDisassembly, // 101
    twoSourceCommonDisassembly, // 102
    twoSourceCommonDisassembly, // 103
    twoSourceCommonDisassembly, // 104
    twoSourceCommonDisassembly, // 105
    NULL, // 106
    NULL, // 107
    twoSourceCommonDisassembly, // 108
    NULL, // 109
    twoSourceCommonDisassembly, // 110
    twoSourceCommonDisassembly, // 111
    twoSourceCommonDisassembly, // 112
    twoSourceCommonDisassembly, // 113
    threeSourceDisassembly, // 114
    NULL, // 115
    NULL, // 116
    NULL, // 117
    NULL, // 118
    oneSourceCommonDisassembly, // 119
    threeSourceDisassembly, // 120
    twoSourceCommonDisassembly, // 121
    threeSourceDisassembly, // 122
    NULL, // 123
    NULL, // 124
    NULL, // 125
    NULL, // 126
    NULL // 127
}; // DisassemblyTopLevel[]
#endif // GED_DISASSEMBLY

#if GED_DISASSEMBLY
const ged_disassembly_table_t GetDisassemblyTable(/* GED_OPCODE */ uint32_t opcode)
{
    return DisassemblyTopLevel[opcode];
}
#endif // GED_DISASSEMBLY
} // namespace GEN12_1
